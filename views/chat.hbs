<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            background-color: #121212;
            color: #fff;
        }

        .chat-container {
            max-width: 600px;
            height: 100vh;
            display: flex;
            flex-direction: column;
            margin: 0 auto;
            background-color: #1f1f1f;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        }

        .chat-header {
            background-color: #e50914;
            padding: 15px;
            text-align: center;
            position: sticky;
            top: 0;
        }

        h2 {
            margin: 0;
            font-size: 1.5rem;
            color: #fff;
        }

        .chat-messages {
            flex-grow: 1;
            overflow-y: auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            background-color: #2a2a2a;
        }

        .message {
            padding: 10px;
            border-radius: 20px;
            max-width: 70%;
            word-wrap: break-word;
            position: relative;
        }

        .message.sent {
            background-color: #e50914;
            color: #fff;
            align-self: flex-end;
            border-bottom-right-radius: 5px;
        }

        .message.received {
            background-color: #333;
            color: #fff;
            align-self: flex-start;
            border-bottom-left-radius: 5px;
        }

        .message-time {
            font-size: 0.8rem;
            color: #bbb;
            position: absolute;
            bottom: -15px;
            right: 10px;
        }

        .chat-input-container {
            display: flex;
            padding: 10px;
            background-color: #2a2a2a;
            border-top: 1px solid #333;
            position: sticky;
            bottom: 0;
        }

        .chat-input {
            flex: 1;
            padding: 15px;
            border: none;
            border-radius: 20px;
            margin-right: 10px;
            background-color: #444;
            color: #fff;
        }

        .chat-input::placeholder {
            color: #aaa;
        }

        .send-button {
            padding: 15px;
            background-color: #e50914;
            color: #fff;
            border: none;
            border-radius: 50%;
            cursor: pointer;
        }

        .send-button:hover {
            background-color: #d40813;
        }
    </style>
</head>

<body>
    <div class="chat-container">
        <div class="chat-header">
            <h2>Chat with {{recipientName}}</h2>
        </div>
        <div id="chatMessages" class="chat-messages">
            <!-- Chat messages will be displayed here -->
        </div>
        <div class="chat-input-container">
            <input type="text" id="messageInput" class="chat-input" placeholder="Type a message..." />
            <button id="sendMessage" class="send-button">âž¤</button>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const userId = "{{userId}}";         // Current user's ID
        const recipientId = "{{recipientId}}"; // Recipient's ID

        const socket = io(); // Initialize Socket.io

        socket.on('connect', () => {
            console.log('Connected to the server');
        });


        // Function to append messages to the chat
        function appendMessage(sender, content, isSent) {
            const chatMessages = document.getElementById('chatMessages');
            const messageElement = document.createElement('div');
            messageElement.className = `message ${isSent ? 'sent' : 'received'}`;
            messageElement.innerHTML = `${content} <span class="message-time">${new Date().toLocaleTimeString()}</span>`;
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight; // Scroll to the bottom
        }

        // Fetch initial chat messages
        async function fetchChatMessages() {
            const response = await fetch(`/api/chat/${userId}/${recipientId}`);
            const messages = await response.json();
            messages.forEach(msg => {
                const isSent = msg.senderId === userId; // Determine if the message was sent by the current user
                appendMessage(msg.senderId, msg.content, isSent);
            });
        }

        // When the send button is clicked
        document.getElementById('sendMessage').addEventListener('click', () => {
            const content = document.getElementById('messageInput').value;

            // Emit the sendMessage event
            socket.emit('sendMessage', {
                senderId: userId,
                recipientId: recipientId,
                content: content
            });

            // Append the sent message to the chat
            appendMessage(userId, content, true);

            // Clear the input field
            document.getElementById('messageInput').value = '';
        });

        // Listen for incoming messages
        socket.on('receiveMessage', (data) => {
            appendMessage(data.senderId, data.content, false);
        });

        // Fetch initial chat messages on load
        fetchChatMessages();
    </script>
</body>

</html>