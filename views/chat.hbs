<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Room</title>
    <link rel="stylesheet" href="style.css">
    <script src="/socket.io/socket.io.js"></script> <!-- Ensure Socket.io is included -->
</head>
<body>

    <div id="chat-container">
        <div id="chat-box">
            <!-- Display previous messages from the database -->
            {{#each messages}}
                <div class="message">
                    <strong>{{senderId}}</strong>: {{content}} <span class="timestamp">{{timestamp}}</span>
                </div>
            {{/each}}
            <div id="messages"></div> <!-- Real-time messages will be appended here -->
        </div>
        <form id="sendMessageForm">
            <input type="text" id="messageInput" placeholder="Type your message here" autocomplete="off"/>
            <button type="submit" id="sendButton">Send</button>
        </form>
    </div>

    <script>
        const socket = io();

        // Get userId and recipientId from the template variables (rendered from the server)
        const senderId = '{{userId}}';  // userId set on the server-side
        const recipientId = '{{recipientId}}';  // recipientId set on the server-side

        const sendButton = document.getElementById('sendButton');
        const messageInput = document.getElementById('messageInput');
        const messageBox = document.getElementById('messages');

        // Event listener for form submission
        document.getElementById('sendMessageForm').addEventListener('submit', function(event) {
            event.preventDefault();

            const message = messageInput.value.trim();
            if (message) {
                // Emit the message to the server
                socket.emit('message', {
                    senderId: senderId,
                    recipientId: recipientId, 
                    content: message
                });

                // Clear the input after sending
                messageInput.value = '';
            }
        });

        // Listen for incoming messages and append them to the chatbox
        socket.on('messageSaved', (messageData) => {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message');
            messageElement.innerHTML = `<strong>${messageData.senderId}</strong>: ${messageData.content} <span class="timestamp">${new Date(messageData.timestamp).toLocaleString()}</span>`;
            messageBox.appendChild(messageElement);
        });
    </script>

</body>
</html>
